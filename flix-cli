#!/usr/bin/env bash

# Dependencies - peerflix, mpv

# making cache directories
mkdir -p "$HOME/.cache/flix-cli"
mkdir -p "$HOME/.cache/flix-cli/video"

# some variables
baseurl="https://1337x.to"
cachedir="$HOME/.cache/flix-cli"
videodir="$HOME/.cache/flix-cli/video"

# prints colored text
print_style () {
    if [ "$2" == "info" ] ; then
        COLOR="96m";
    elif [ "$2" == "success" ] ; then
        COLOR="92m";
    elif [ "$2" == "warning" ] ; then
        COLOR="93m";
    elif [ "$2" == "danger" ] ; then
        COLOR="91m";
    else #default color
        COLOR="0m";
    fi
    STARTCOLOR="\e[$COLOR";
    ENDCOLOR="\e[0m";
    printf "$STARTCOLOR%b$ENDCOLOR" "$1";
}

[ ! -x "$(command -v peerflix)" ] && print_style "peerflix is not installed, please install it using npm\n" "danger" && exit 0
[ ! -x "$(command -v mpv)" ] && print_style "mpv is not installed, please install it using your package manager\n" "danger" && exit 0

# getting user input
if [ -z "$1" ]; then
  print_style "Search:\n> " "success"
  read -r query
else
  query=$*
fi
query="$(echo -e "$query" | sed 's/ /+/g')"

# doing the scrap
curl -s $baseurl/search/"$query"/1/ > "$cachedir"/tmp.html

# getting titles
grep -o '<a href="/torrent/.*</a>' "$cachedir"/tmp.html |
  sed 's/<[^>]*>//g' > "$cachedir"/titles.bw
result_count=$(wc -l "$cachedir"/titles.bw | awk '{print $1}')

# error message
if [ "$result_count" -lt 1 ]; then
  print_style "No Results found. Please try again...\n" "danger"
  exit 0
fi

# getting seeders and leechers
grep -o '<td class="coll-2 seeds.*</td>\|<td class="coll-3 leeches.*</td>' "$cachedir"/tmp.html |
  sed 's/<[^>]*>//g' | sed 'N;s/\n/ /' > "$cachedir"/seedleech.bw

# getting file size
grep -o '<td class="coll-4 size.*</td>' "$cachedir"/tmp.html |
  sed 's/<span class="seeds">.*<\/span>//g' |
  sed -e 's/<[^>]*>//g' > "$cachedir"/size.bw

# getting links
grep -E '/torrent/' "$cachedir"/tmp.html |
  sed -E 's#.*(/torrent/.*)/">.*/#\1#' |
  sed 's/td>//g' > "$cachedir"/links.bw

# clearning up some data to display
sed 's/\./ /g; s/\-/ /g' "$cachedir"/titles.bw |
  sed 's/[^A-Za-z0-9 ]//g' | tr -s " " > "$cachedir"/tmp && mv "$cachedir"/tmp "$cachedir"/titles.bw

awk '{print NR " - ["$0"]"}' "$cachedir"/size.bw > "$cachedir"/tmp && mv "$cachedir"/tmp "$cachedir"/size.bw
awk '{print "[S:"$1 ", L:"$2"]" }' "$cachedir"/seedleech.bw > "$cachedir"/tmp && mv "$cachedir"/tmp "$cachedir"/seedleech.bw

# getting the line number
paste -d\  "$cachedir"/size.bw "$cachedir"/titles.bw "$cachedir"/seedleech.bw
print_style "Select your stream\n> " "warning"
read -r LINE

# error message
if [ -z "$LINE" ]; then
  print_style "No Results selected. Exiting...\n" "danger"
  exit 0
fi

# success message
print_style "Getting seeds...\n" "warning"
url=$(head -n "$LINE" "$cachedir"/links.bw | tail -n +"$LINE")
fullURL="${baseurl}${url}/"

# requesting page for magnet link
curl -s "$fullURL" > "$cachedir"/tmp.html
magnet=$(grep -Eo "magnet:\?xt=urn:btih:[a-zA-Z0-9]*" "$cachedir"/tmp.html | head -n 1)

# main action
peerflix -k -f "$videodir" "$magnet"
rm -rf "$cachedir"
exit 0
